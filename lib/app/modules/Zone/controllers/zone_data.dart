///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class carbyIDCarPosition {
/*
{
  "type": "Point",
  "coordinates": [
    -122.2767873957903
  ]
}
*/

  String? type;
  List<double?>? coordinates;

  carbyIDCarPosition({
    this.type,
    this.coordinates,
  });
  carbyIDCarPosition.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class carbyIDCar {
/*
{
  "position": {
    "type": "Point",
    "coordinates": [
      -122.2767873957903
    ]
  },
  "_id": "63f4b3146c2c9559d406b8fe",
  "brand": "BMW",
  "model": "C3000",
  "qnr": "6DB9853D00FFF012",
  "seatCapacity": 2,
  "color": "black",
  "fuelType": "fuel",
  "category": "SUV",
  "images": [
    "https://stimg.cardekho.com/images/carexteriorimages/930x620/Rolls-Royce/Ghost/8051/1601280317407/front-left-side-47.jpg"
  ],
  "isDamaged": false,
  "status": "active",
  "fuel_level": 0,
  "bookingStatus": "idle",
  "isDeleted": false,
  "createdAt": "2023-02-21T12:03:32.766Z",
  "updatedAt": "2023-12-11T10:33:40.503Z",
  "qrCodeImage": "https://www.hellotech.com/guide/wp-content/uploads/2020/05/HelloTech-qr-code.jpg",
  "vehicle_identification_number": "",
  "vehicle_license_plate": "",
  "isPaused": false
}
*/

  carbyIDCarPosition? position;
  String? Id;
  String? brand;
  String? model;
  String? qnr;
  int? seatCapacity;
  String? color;
  String? fuelType;
  String? category;
  List<String?>? images;
  bool? isDamaged;
  String? status;
  int? fuelLevel;
  String? bookingStatus;
  bool? isDeleted;
  String? createdAt;
  String? updatedAt;
  String? qrCodeImage;
  String? vehicleIdentificationNumber;
  String? vehicleLicensePlate;
  bool? isPaused;

  carbyIDCar({
    this.position,
    this.Id,
    this.brand,
    this.model,
    this.qnr,
    this.seatCapacity,
    this.color,
    this.fuelType,
    this.category,
    this.images,
    this.isDamaged,
    this.status,
    this.fuelLevel,
    this.bookingStatus,
    this.isDeleted,
    this.createdAt,
    this.updatedAt,
    this.qrCodeImage,
    this.vehicleIdentificationNumber,
    this.vehicleLicensePlate,
    this.isPaused,
  });
  carbyIDCar.fromJson(Map<String, dynamic> json) {
    position = (json['position'] != null) ? carbyIDCarPosition.fromJson(json['position']) : null;
    Id = json['_id']?.toString();
    brand = json['brand']?.toString();
    model = json['model']?.toString();
    qnr = json['qnr']?.toString();
    seatCapacity = json['seatCapacity']?.toInt();
    color = json['color']?.toString();
    fuelType = json['fuelType']?.toString();
    category = json['category']?.toString();
    if (json['images'] != null) {
      final v = json['images'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      images = arr0;
    }
    isDamaged = json['isDamaged'];
    status = json['status']?.toString();
    fuelLevel = json['fuel_level']?.toInt();
    bookingStatus = json['bookingStatus']?.toString();
    isDeleted = json['isDeleted'];
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    qrCodeImage = json['qrCodeImage']?.toString();
    vehicleIdentificationNumber = json['vehicle_identification_number']?.toString();
    vehicleLicensePlate = json['vehicle_license_plate']?.toString();
    isPaused = json['isPaused'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (position != null) {
      data['position'] = position!.toJson();
    }
    data['_id'] = Id;
    data['brand'] = brand;
    data['model'] = model;
    data['qnr'] = qnr;
    data['seatCapacity'] = seatCapacity;
    data['color'] = color;
    data['fuelType'] = fuelType;
    data['category'] = category;
    if (images != null) {
      final v = images;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['images'] = arr0;
    }
    data['isDamaged'] = isDamaged;
    data['status'] = status;
    data['fuel_level'] = fuelLevel;
    data['bookingStatus'] = bookingStatus;
    data['isDeleted'] = isDeleted;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['qrCodeImage'] = qrCodeImage;
    data['vehicle_identification_number'] = vehicleIdentificationNumber;
    data['vehicle_license_plate'] = vehicleLicensePlate;
    data['isPaused'] = isPaused;
    return data;
  }
}

class carbyID {
/*
{
  "status": true,
  "message": "Get car details.",
  "car": {
    "position": {
      "type": "Point",
      "coordinates": [
        -122.2767873957903
      ]
    },
    "_id": "63f4b3146c2c9559d406b8fe",
    "brand": "BMW",
    "model": "C3000",
    "qnr": "6DB9853D00FFF012",
    "seatCapacity": 2,
    "color": "black",
    "fuelType": "fuel",
    "category": "SUV",
    "images": [
      "https://stimg.cardekho.com/images/carexteriorimages/930x620/Rolls-Royce/Ghost/8051/1601280317407/front-left-side-47.jpg"
    ],
    "isDamaged": false,
    "status": "active",
    "fuel_level": 0,
    "bookingStatus": "idle",
    "isDeleted": false,
    "createdAt": "2023-02-21T12:03:32.766Z",
    "updatedAt": "2023-12-11T10:33:40.503Z",
    "qrCodeImage": "https://www.hellotech.com/guide/wp-content/uploads/2020/05/HelloTech-qr-code.jpg",
    "vehicle_identification_number": "",
    "vehicle_license_plate": "",
    "isPaused": false
  }
}
*/

  bool? status;
  String? message;
  carbyIDCar? car;

  carbyID({
    this.status,
    this.message,
    this.car,
  });
  carbyID.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    message = json['message']?.toString();
    car = (json['car'] != null) ? carbyIDCar.fromJson(json['car']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    if (car != null) {
      data['car'] = car!.toJson();
    }
    return data;
  }
}
