///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class TotalPaymentsDataStripePaymentDetailPaymentMethodOptionsCard {
/*
{
  "installments": "",
  "mandate_options": "",
  "network": "",
  "request_three_d_secure": "automatic"
}
*/

  String? installments;
  String? mandateOptions;
  String? network;
  String? requestThreeDSecure;

  TotalPaymentsDataStripePaymentDetailPaymentMethodOptionsCard({
    this.installments,
    this.mandateOptions,
    this.network,
    this.requestThreeDSecure,
  });
  TotalPaymentsDataStripePaymentDetailPaymentMethodOptionsCard.fromJson(Map<String, dynamic> json) {
    installments = json['installments']?.toString();
    mandateOptions = json['mandate_options']?.toString();
    network = json['network']?.toString();
    requestThreeDSecure = json['request_three_d_secure']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['installments'] = installments;
    data['mandate_options'] = mandateOptions;
    data['network'] = network;
    data['request_three_d_secure'] = requestThreeDSecure;
    return data;
  }
}

class TotalPaymentsDataStripePaymentDetailPaymentMethodOptions {
/*
{
  "card": {
    "installments": "",
    "mandate_options": "",
    "network": "",
    "request_three_d_secure": "automatic"
  }
}
*/

  TotalPaymentsDataStripePaymentDetailPaymentMethodOptionsCard? card;

  TotalPaymentsDataStripePaymentDetailPaymentMethodOptions({
    this.card,
  });
  TotalPaymentsDataStripePaymentDetailPaymentMethodOptions.fromJson(Map<String, dynamic> json) {
    card = (json['card'] != null) ? TotalPaymentsDataStripePaymentDetailPaymentMethodOptionsCard.fromJson(json['card']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (card != null) {
      data['card'] = card!.toJson();
    }
    return data;
  }
}

class TotalPaymentsDataStripePaymentDetail {
/*
{
  "id": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ",
  "object": "payment_intent",
  "amount": 380,
  "amount_capturable": 0,
  "amount_received": 380,
  "application": "",
  "application_fee_amount": "",
  "automatic_payment_methods": "",
  "canceled_at": "",
  "cancellation_reason": "",
  "capture_method": "automatic",
  "client_secret": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ_secret_Aq36k3FWc2FJWYF0IbP02sKIK",
  "confirmation_method": "automatic",
  "created": 1692347306,
  "currency": "usd",
  "customer": "cus_NrUqU0rlJ0QffW",
  "description": "",
  "invoice": "",
  "last_payment_error": "",
  "latest_charge": "ch_3NgO2gERG4ZXrlcJ0RLYKbqI",
  "livemode": false,
  "next_action": "",
  "on_behalf_of": "",
  "payment_method": "card_1N8iJAERG4ZXrlcJoahvhnXr",
  "payment_method_options": {
    "card": {
      "installments": "",
      "mandate_options": "",
      "network": "",
      "request_three_d_secure": "automatic"
    }
  },
  "payment_method_types": [
    "card"
  ],
  "processing": "",
  "receipt_email": "",
  "review": "",
  "setup_future_usage": "",
  "shipping": "",
  "source": "",
  "statement_descriptor": "",
  "statement_descriptor_suffix": "",
  "status": "succeeded",
  "transfer_data": "",
  "transfer_group": ""
}
*/

  String? id;
  String? object;
  int? amount;
  int? amountCapturable;
  int? amountReceived;
  String? application;
  String? applicationFeeAmount;
  String? automaticPaymentMethods;
  String? canceledAt;
  String? cancellationReason;
  String? captureMethod;
  String? clientSecret;
  String? confirmationMethod;
  int? created;
  String? currency;
  String? customer;
  String? description;
  String? invoice;
  String? lastPaymentError;
  String? latestCharge;
  bool? livemode;
  String? nextAction;
  String? onBehalfOf;
  String? paymentMethod;
  TotalPaymentsDataStripePaymentDetailPaymentMethodOptions? paymentMethodOptions;
  List<String?>? paymentMethodTypes;
  String? processing;
  String? receiptEmail;
  String? review;
  String? setupFutureUsage;
  String? shipping;
  String? source;
  String? statementDescriptor;
  String? statementDescriptorSuffix;
  String? status;
  String? transferData;
  String? transferGroup;

  TotalPaymentsDataStripePaymentDetail({
    this.id,
    this.object,
    this.amount,
    this.amountCapturable,
    this.amountReceived,
    this.application,
    this.applicationFeeAmount,
    this.automaticPaymentMethods,
    this.canceledAt,
    this.cancellationReason,
    this.captureMethod,
    this.clientSecret,
    this.confirmationMethod,
    this.created,
    this.currency,
    this.customer,
    this.description,
    this.invoice,
    this.lastPaymentError,
    this.latestCharge,
    this.livemode,
    this.nextAction,
    this.onBehalfOf,
    this.paymentMethod,
    this.paymentMethodOptions,
    this.paymentMethodTypes,
    this.processing,
    this.receiptEmail,
    this.review,
    this.setupFutureUsage,
    this.shipping,
    this.source,
    this.statementDescriptor,
    this.statementDescriptorSuffix,
    this.status,
    this.transferData,
    this.transferGroup,
  });
  TotalPaymentsDataStripePaymentDetail.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    amount = json['amount']?.toInt();
    amountCapturable = json['amount_capturable']?.toInt();
    amountReceived = json['amount_received']?.toInt();
    application = json['application']?.toString();
    applicationFeeAmount = json['application_fee_amount']?.toString();
    automaticPaymentMethods = json['automatic_payment_methods']?.toString();
    canceledAt = json['canceled_at']?.toString();
    cancellationReason = json['cancellation_reason']?.toString();
    captureMethod = json['capture_method']?.toString();
    clientSecret = json['client_secret']?.toString();
    confirmationMethod = json['confirmation_method']?.toString();
    created = json['created']?.toInt();
    currency = json['currency']?.toString();
    customer = json['customer']?.toString();
    description = json['description']?.toString();
    invoice = json['invoice']?.toString();
    lastPaymentError = json['last_payment_error']?.toString();
    latestCharge = json['latest_charge']?.toString();
    livemode = json['livemode'];
    nextAction = json['next_action']?.toString();
    onBehalfOf = json['on_behalf_of']?.toString();
    paymentMethod = json['payment_method']?.toString();
    paymentMethodOptions = (json['payment_method_options'] != null) ? TotalPaymentsDataStripePaymentDetailPaymentMethodOptions.fromJson(json['payment_method_options']) : null;
    if (json['payment_method_types'] != null) {
      final v = json['payment_method_types'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      paymentMethodTypes = arr0;
    }
    processing = json['processing']?.toString();
    receiptEmail = json['receipt_email']?.toString();
    review = json['review']?.toString();
    setupFutureUsage = json['setup_future_usage']?.toString();
    shipping = json['shipping']?.toString();
    source = json['source']?.toString();
    statementDescriptor = json['statement_descriptor']?.toString();
    statementDescriptorSuffix = json['statement_descriptor_suffix']?.toString();
    status = json['status']?.toString();
    transferData = json['transfer_data']?.toString();
    transferGroup = json['transfer_group']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['amount'] = amount;
    data['amount_capturable'] = amountCapturable;
    data['amount_received'] = amountReceived;
    data['application'] = application;
    data['application_fee_amount'] = applicationFeeAmount;
    data['automatic_payment_methods'] = automaticPaymentMethods;
    data['canceled_at'] = canceledAt;
    data['cancellation_reason'] = cancellationReason;
    data['capture_method'] = captureMethod;
    data['client_secret'] = clientSecret;
    data['confirmation_method'] = confirmationMethod;
    data['created'] = created;
    data['currency'] = currency;
    data['customer'] = customer;
    data['description'] = description;
    data['invoice'] = invoice;
    data['last_payment_error'] = lastPaymentError;
    data['latest_charge'] = latestCharge;
    data['livemode'] = livemode;
    data['next_action'] = nextAction;
    data['on_behalf_of'] = onBehalfOf;
    data['payment_method'] = paymentMethod;
    if (paymentMethodOptions != null) {
      data['payment_method_options'] = paymentMethodOptions!.toJson();
    }
    if (paymentMethodTypes != null) {
      final v = paymentMethodTypes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['payment_method_types'] = arr0;
    }
    data['processing'] = processing;
    data['receipt_email'] = receiptEmail;
    data['review'] = review;
    data['setup_future_usage'] = setupFutureUsage;
    data['shipping'] = shipping;
    data['source'] = source;
    data['statement_descriptor'] = statementDescriptor;
    data['statement_descriptor_suffix'] = statementDescriptorSuffix;
    data['status'] = status;
    data['transfer_data'] = transferData;
    data['transfer_group'] = transferGroup;
    return data;
  }
}

class TotalPaymentsDataBookingPaymentObject {
/*
{
  "mile": 0,
  "time": 0,
  "tax": 0
}
*/

  int? mile;
  int? time;
  int? tax;

  TotalPaymentsDataBookingPaymentObject({
    this.mile,
    this.time,
    this.tax,
  });
  TotalPaymentsDataBookingPaymentObject.fromJson(Map<String, dynamic> json) {
    mile = json['mile']?.toInt();
    time = json['time']?.toInt();
    tax = json['tax']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['mile'] = mile;
    data['time'] = time;
    data['tax'] = tax;
    return data;
  }
}

class TotalPaymentsDataUserStripeCards {
/*
{
  "encryptedCode": "U2FsdGVkX1+W4TCBMcZNJC0Tk6R+kdN/x186dIePUxiu1KDtQCijARM8FPU6T+Bm4QEN/Wtc7l8hXs22busRnkvpQ1Xoc7wuRDwB0qhI+U1lCndFFnKMjLNbPNksLtP+q0Qv1jNIQFFt/UR9FBMlN7v7Tb4F9HRgUTfCjATvIEk=",
  "stripeCardId": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
  "_id": "645a035a49fea5271de9d913"
}
*/

  String? encryptedCode;
  String? stripeCardId;
  String? Id;

  TotalPaymentsDataUserStripeCards({
    this.encryptedCode,
    this.stripeCardId,
    this.Id,
  });
  TotalPaymentsDataUserStripeCards.fromJson(Map<String, dynamic> json) {
    encryptedCode = json['encryptedCode']?.toString();
    stripeCardId = json['stripeCardId']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['encryptedCode'] = encryptedCode;
    data['stripeCardId'] = stripeCardId;
    data['_id'] = Id;
    return data;
  }
}

class TotalPaymentsDataUserInsurance {
/*
{
  "insuranceNumber": "1234512345",
  "validTill": "09-09-1234",
  "image": "https://miro.medium.com/max/1400/1*Lm9aFB_p9Bx8afzwx6KvlA.png"
}
*/

  String? insuranceNumber;
  String? validTill;
  String? image;

  TotalPaymentsDataUserInsurance({
    this.insuranceNumber,
    this.validTill,
    this.image,
  });
  TotalPaymentsDataUserInsurance.fromJson(Map<String, dynamic> json) {
    insuranceNumber = json['insuranceNumber']?.toString();
    validTill = json['validTill']?.toString();
    image = json['image']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['insuranceNumber'] = insuranceNumber;
    data['validTill'] = validTill;
    data['image'] = image;
    return data;
  }
}

class TotalPaymentsDataUserDl {
/*
{
  "licenceNumber": "1234567890",
  "validTill": "02-09-1995",
  "image": "https://www.shutterstock.com/image-vector/driver-license-male-photo-identification-260nw-1227173818.jpg"
}
*/

  String? licenceNumber;
  String? validTill;
  String? image;

  TotalPaymentsDataUserDl({
    this.licenceNumber,
    this.validTill,
    this.image,
  });
  TotalPaymentsDataUserDl.fromJson(Map<String, dynamic> json) {
    licenceNumber = json['licenceNumber']?.toString();
    validTill = json['validTill']?.toString();
    image = json['image']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['licenceNumber'] = licenceNumber;
    data['validTill'] = validTill;
    data['image'] = image;
    return data;
  }
}

class TotalPaymentsDataUser {
/*
{
  "dl": {
    "licenceNumber": "1234567890",
    "validTill": "02-09-1995",
    "image": "https://www.shutterstock.com/image-vector/driver-license-male-photo-identification-260nw-1227173818.jpg"
  },
  "insurance": {
    "insuranceNumber": "1234512345",
    "validTill": "09-09-1234",
    "image": "https://miro.medium.com/max/1400/1*Lm9aFB_p9Bx8afzwx6KvlA.png"
  },
  "_id": "6388c33fc6b2d524a07fdc15",
  "name": "pushpam kumar",
  "phone": "+919999999999",
  "email": "p .singh@gmail.com",
  "image": "https://zammauserprofile.s3.us-west-1.amazonaws.com/user-profile-image_picker1943085984164623910.jpg",
  "role": "admin",
  "firebaseUid": "UcN7eGb1oVShfCwm3Ogwry6q9T93",
  "firebaseSignInProvider": "phone",
  "gender": "male",
  "address": "Janakpuri Delhi",
  "suspensionReason": "Driving outside zone.",
  "isSuspended": false,
  "noOfRides": 34,
  "isDeleted": false,
  "createdAt": "2022-12-01T15:07:43.680Z",
  "updatedAt": "2023-08-18T08:06:26.282Z",
  "dob": "1999-05-09T00:00:00.000Z",
  "isApproved": true,
  "totalTravelKm": 0,
  "stripeCustomerId": "cus_NrUqU0rlJ0QffW",
  "stripeCardId": "card_1NLWPlERG4ZXrlcJh4hp2s1X",
  "stripeCards": [
    {
      "encryptedCode": "U2FsdGVkX1+W4TCBMcZNJC0Tk6R+kdN/x186dIePUxiu1KDtQCijARM8FPU6T+Bm4QEN/Wtc7l8hXs22busRnkvpQ1Xoc7wuRDwB0qhI+U1lCndFFnKMjLNbPNksLtP+q0Qv1jNIQFFt/UR9FBMlN7v7Tb4F9HRgUTfCjATvIEk=",
      "stripeCardId": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
      "_id": "645a035a49fea5271de9d913"
    }
  ]
}
*/

  TotalPaymentsDataUserDl? dl;
  TotalPaymentsDataUserInsurance? insurance;
  String? Id;
  String? name;
  String? phone;
  String? email;
  String? image;
  String? role;
  String? firebaseUid;
  String? firebaseSignInProvider;
  String? gender;
  String? address;
  String? suspensionReason;
  bool? isSuspended;
  int? noOfRides;
  bool? isDeleted;
  String? createdAt;
  String? updatedAt;
  String? dob;
  bool? isApproved;
  int? totalTravelKm;
  String? stripeCustomerId;
  String? stripeCardId;
  List<TotalPaymentsDataUserStripeCards?>? stripeCards;

  TotalPaymentsDataUser({
    this.dl,
    this.insurance,
    this.Id,
    this.name,
    this.phone,
    this.email,
    this.image,
    this.role,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.gender,
    this.address,
    this.suspensionReason,
    this.isSuspended,
    this.noOfRides,
    this.isDeleted,
    this.createdAt,
    this.updatedAt,
    this.dob,
    this.isApproved,
    this.totalTravelKm,
    this.stripeCustomerId,
    this.stripeCardId,
    this.stripeCards,
  });
  TotalPaymentsDataUser.fromJson(Map<String, dynamic> json) {
    dl = (json['dl'] != null) ? TotalPaymentsDataUserDl.fromJson(json['dl']) : null;
    insurance = (json['insurance'] != null) ? TotalPaymentsDataUserInsurance.fromJson(json['insurance']) : null;
    Id = json['_id']?.toString();
    name = json['name']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    image = json['image']?.toString();
    role = json['role']?.toString();
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    gender = json['gender']?.toString();
    address = json['address']?.toString();
    suspensionReason = json['suspensionReason']?.toString();
    isSuspended = json['isSuspended'];
    noOfRides = json['noOfRides']?.toInt();
    isDeleted = json['isDeleted'];
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    dob = json['dob']?.toString();
    isApproved = json['isApproved'];
    totalTravelKm = json['totalTravelKm']?.toInt();
    stripeCustomerId = json['stripeCustomerId']?.toString();
    stripeCardId = json['stripeCardId']?.toString();
    if (json['stripeCards'] != null) {
      final v = json['stripeCards'];
      final arr0 = <TotalPaymentsDataUserStripeCards>[];
      v.forEach((v) {
        arr0.add(TotalPaymentsDataUserStripeCards.fromJson(v));
      });
      stripeCards = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (dl != null) {
      data['dl'] = dl!.toJson();
    }
    if (insurance != null) {
      data['insurance'] = insurance!.toJson();
    }
    data['_id'] = Id;
    data['name'] = name;
    data['phone'] = phone;
    data['email'] = email;
    data['image'] = image;
    data['role'] = role;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    data['gender'] = gender;
    data['address'] = address;
    data['suspensionReason'] = suspensionReason;
    data['isSuspended'] = isSuspended;
    data['noOfRides'] = noOfRides;
    data['isDeleted'] = isDeleted;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['dob'] = dob;
    data['isApproved'] = isApproved;
    data['totalTravelKm'] = totalTravelKm;
    data['stripeCustomerId'] = stripeCustomerId;
    data['stripeCardId'] = stripeCardId;
    if (stripeCards != null) {
      final v = stripeCards;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['stripeCards'] = arr0;
    }
    return data;
  }
}

class TotalPaymentsData {
/*
{
  "_id": "64df2bab6c67f634cce1e734",
  "booking": "64df26816c67f634cce1e6d1",
  "bookingPlan": "basic",
  "user": {
    "dl": {
      "licenceNumber": "1234567890",
      "validTill": "02-09-1995",
      "image": "https://www.shutterstock.com/image-vector/driver-license-male-photo-identification-260nw-1227173818.jpg"
    },
    "insurance": {
      "insuranceNumber": "1234512345",
      "validTill": "09-09-1234",
      "image": "https://miro.medium.com/max/1400/1*Lm9aFB_p9Bx8afzwx6KvlA.png"
    },
    "_id": "6388c33fc6b2d524a07fdc15",
    "name": "pushpam kumar",
    "phone": "+919999999999",
    "email": "p .singh@gmail.com",
    "image": "https://zammauserprofile.s3.us-west-1.amazonaws.com/user-profile-image_picker1943085984164623910.jpg",
    "role": "admin",
    "firebaseUid": "UcN7eGb1oVShfCwm3Ogwry6q9T93",
    "firebaseSignInProvider": "phone",
    "gender": "male",
    "address": "Janakpuri Delhi",
    "suspensionReason": "Driving outside zone.",
    "isSuspended": false,
    "noOfRides": 34,
    "isDeleted": false,
    "createdAt": "2022-12-01T15:07:43.680Z",
    "updatedAt": "2023-08-18T08:06:26.282Z",
    "dob": "1999-05-09T00:00:00.000Z",
    "isApproved": true,
    "totalTravelKm": 0,
    "stripeCustomerId": "cus_NrUqU0rlJ0QffW",
    "stripeCardId": "card_1NLWPlERG4ZXrlcJh4hp2s1X",
    "stripeCards": [
      {
        "encryptedCode": "U2FsdGVkX1+W4TCBMcZNJC0Tk6R+kdN/x186dIePUxiu1KDtQCijARM8FPU6T+Bm4QEN/Wtc7l8hXs22busRnkvpQ1Xoc7wuRDwB0qhI+U1lCndFFnKMjLNbPNksLtP+q0Qv1jNIQFFt/UR9FBMlN7v7Tb4F9HRgUTfCjATvIEk=",
        "stripeCardId": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
        "_id": "645a035a49fea5271de9d913"
      }
    ]
  },
  "paymentStep": "finalPayment",
  "bookingPaymentObject": {
    "mile": 0,
    "time": 0,
    "tax": 0
  },
  "amount": 3.797,
  "transactionId": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ",
  "stripePaymentDetail": {
    "id": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ",
    "object": "payment_intent",
    "amount": 380,
    "amount_capturable": 0,
    "amount_received": 380,
    "application": "",
    "application_fee_amount": "",
    "automatic_payment_methods": "",
    "canceled_at": "",
    "cancellation_reason": "",
    "capture_method": "automatic",
    "client_secret": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ_secret_Aq36k3FWc2FJWYF0IbP02sKIK",
    "confirmation_method": "automatic",
    "created": 1692347306,
    "currency": "usd",
    "customer": "cus_NrUqU0rlJ0QffW",
    "description": "",
    "invoice": "",
    "last_payment_error": "",
    "latest_charge": "ch_3NgO2gERG4ZXrlcJ0RLYKbqI",
    "livemode": false,
    "next_action": "",
    "on_behalf_of": "",
    "payment_method": "card_1N8iJAERG4ZXrlcJoahvhnXr",
    "payment_method_options": {
      "card": {
        "installments": "",
        "mandate_options": "",
        "network": "",
        "request_three_d_secure": "automatic"
      }
    },
    "payment_method_types": [
      "card"
    ],
    "processing": "",
    "receipt_email": "",
    "review": "",
    "setup_future_usage": "",
    "shipping": "",
    "source": "",
    "statement_descriptor": "",
    "statement_descriptor_suffix": "",
    "status": "succeeded",
    "transfer_data": "",
    "transfer_group": ""
  },
  "totalPaidForBooking": 3.797,
  "refunded": false,
  "refund": "",
  "createdAt": "2023-08-18T08:28:27.326Z",
  "updatedAt": "2023-08-18T08:28:27.326Z",
  "id": "64df2bab6c67f634cce1e734"
}
*/

  String? Id;
  String? booking;
  String? bookingPlan;
  TotalPaymentsDataUser? user;
  String? paymentStep;
  TotalPaymentsDataBookingPaymentObject? bookingPaymentObject;
  double? amount;
  String? transactionId;
  TotalPaymentsDataStripePaymentDetail? stripePaymentDetail;
  double? totalPaidForBooking;
  bool? refunded;
  String? refund;
  String? createdAt;
  String? updatedAt;
  String? id;

  TotalPaymentsData({
    this.Id,
    this.booking,
    this.bookingPlan,
    this.user,
    this.paymentStep,
    this.bookingPaymentObject,
    this.amount,
    this.transactionId,
    this.stripePaymentDetail,
    this.totalPaidForBooking,
    this.refunded,
    this.refund,
    this.createdAt,
    this.updatedAt,
    this.id,
  });
  TotalPaymentsData.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    booking = json['booking']?.toString();
    bookingPlan = json['bookingPlan']?.toString();
    user = (json['user'] != null) ? TotalPaymentsDataUser.fromJson(json['user']) : null;
    paymentStep = json['paymentStep']?.toString();
    bookingPaymentObject = (json['bookingPaymentObject'] != null) ? TotalPaymentsDataBookingPaymentObject.fromJson(json['bookingPaymentObject']) : null;
    amount = json['amount']?.toDouble();
    transactionId = json['transactionId']?.toString();
    stripePaymentDetail = (json['stripePaymentDetail'] != null) ? TotalPaymentsDataStripePaymentDetail.fromJson(json['stripePaymentDetail']) : null;
    totalPaidForBooking = json['totalPaidForBooking']?.toDouble();
    refunded = json['refunded'];
    refund = json['refund']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    id = json['id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['booking'] = booking;
    data['bookingPlan'] = bookingPlan;
    if (user != null) {
      data['user'] = user!.toJson();
    }
    data['paymentStep'] = paymentStep;
    if (bookingPaymentObject != null) {
      data['bookingPaymentObject'] = bookingPaymentObject!.toJson();
    }
    data['amount'] = amount;
    data['transactionId'] = transactionId;
    if (stripePaymentDetail != null) {
      data['stripePaymentDetail'] = stripePaymentDetail!.toJson();
    }
    data['totalPaidForBooking'] = totalPaidForBooking;
    data['refunded'] = refunded;
    data['refund'] = refund;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['id'] = id;
    return data;
  }
}

class TotalPayments {
/*
{
  "status": true,
  "message": "All transactions.",
  "results": 92,
  "data": [
    {
      "_id": "64df2bab6c67f634cce1e734",
      "booking": "64df26816c67f634cce1e6d1",
      "bookingPlan": "basic",
      "user": {
        "dl": {
          "licenceNumber": "1234567890",
          "validTill": "02-09-1995",
          "image": "https://www.shutterstock.com/image-vector/driver-license-male-photo-identification-260nw-1227173818.jpg"
        },
        "insurance": {
          "insuranceNumber": "1234512345",
          "validTill": "09-09-1234",
          "image": "https://miro.medium.com/max/1400/1*Lm9aFB_p9Bx8afzwx6KvlA.png"
        },
        "_id": "6388c33fc6b2d524a07fdc15",
        "name": "pushpam kumar",
        "phone": "+919999999999",
        "email": "p .singh@gmail.com",
        "image": "https://zammauserprofile.s3.us-west-1.amazonaws.com/user-profile-image_picker1943085984164623910.jpg",
        "role": "admin",
        "firebaseUid": "UcN7eGb1oVShfCwm3Ogwry6q9T93",
        "firebaseSignInProvider": "phone",
        "gender": "male",
        "address": "Janakpuri Delhi",
        "suspensionReason": "Driving outside zone.",
        "isSuspended": false,
        "noOfRides": 34,
        "isDeleted": false,
        "createdAt": "2022-12-01T15:07:43.680Z",
        "updatedAt": "2023-08-18T08:06:26.282Z",
        "dob": "1999-05-09T00:00:00.000Z",
        "isApproved": true,
        "totalTravelKm": 0,
        "stripeCustomerId": "cus_NrUqU0rlJ0QffW",
        "stripeCardId": "card_1NLWPlERG4ZXrlcJh4hp2s1X",
        "stripeCards": [
          {
            "encryptedCode": "U2FsdGVkX1+W4TCBMcZNJC0Tk6R+kdN/x186dIePUxiu1KDtQCijARM8FPU6T+Bm4QEN/Wtc7l8hXs22busRnkvpQ1Xoc7wuRDwB0qhI+U1lCndFFnKMjLNbPNksLtP+q0Qv1jNIQFFt/UR9FBMlN7v7Tb4F9HRgUTfCjATvIEk=",
            "stripeCardId": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
            "_id": "645a035a49fea5271de9d913"
          }
        ]
      },
      "paymentStep": "finalPayment",
      "bookingPaymentObject": {
        "mile": 0,
        "time": 0,
        "tax": 0
      },
      "amount": 3.797,
      "transactionId": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ",
      "stripePaymentDetail": {
        "id": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ",
        "object": "payment_intent",
        "amount": 380,
        "amount_capturable": 0,
        "amount_received": 380,
        "application": "",
        "application_fee_amount": "",
        "automatic_payment_methods": "",
        "canceled_at": "",
        "cancellation_reason": "",
        "capture_method": "automatic",
        "client_secret": "pi_3NgO2gERG4ZXrlcJ0QvL9KRJ_secret_Aq36k3FWc2FJWYF0IbP02sKIK",
        "confirmation_method": "automatic",
        "created": 1692347306,
        "currency": "usd",
        "customer": "cus_NrUqU0rlJ0QffW",
        "description": "",
        "invoice": "",
        "last_payment_error": "",
        "latest_charge": "ch_3NgO2gERG4ZXrlcJ0RLYKbqI",
        "livemode": false,
        "next_action": "",
        "on_behalf_of": "",
        "payment_method": "card_1N8iJAERG4ZXrlcJoahvhnXr",
        "payment_method_options": {
          "card": {
            "installments": "",
            "mandate_options": "",
            "network": "",
            "request_three_d_secure": "automatic"
          }
        },
        "payment_method_types": [
          "card"
        ],
        "processing": "",
        "receipt_email": "",
        "review": "",
        "setup_future_usage": "",
        "shipping": "",
        "source": "",
        "statement_descriptor": "",
        "statement_descriptor_suffix": "",
        "status": "succeeded",
        "transfer_data": "",
        "transfer_group": ""
      },
      "totalPaidForBooking": 3.797,
      "refunded": false,
      "refund": "",
      "createdAt": "2023-08-18T08:28:27.326Z",
      "updatedAt": "2023-08-18T08:28:27.326Z",
      "id": "64df2bab6c67f634cce1e734"
    }
  ]
}
*/

  bool? status;
  String? message;
  int? results;
  List<TotalPaymentsData?>? data;

  TotalPayments({
    this.status,
    this.message,
    this.results,
    this.data,
  });
  TotalPayments.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    message = json['message']?.toString();
    results = json['results']?.toInt();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <TotalPaymentsData>[];
      v.forEach((v) {
        arr0.add(TotalPaymentsData.fromJson(v));
      });
      this.data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    data['results'] = results;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    return data;
  }
}
