///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class EndRideDataTripDataEventStatusPosition {
/*
{
  "timestamp": "2023-10-19T07:08:49.000Z",
  "lon": -121.340591,
  "lat": 38.610764,
  "hdop": 0.96,
  "speed_over_ground": 0,
  "quality": 1,
  "satellites_in_use": 12,
  "altitude": 21,
  "heading": 307,
  "navigation_solution": "standalone_3d"
}
*/

  String? timestamp;
  double? lon;
  double? lat;
  double? hdop;
  int? speedOverGround;
  int? quality;
  int? satellitesInUse;
  int? altitude;
  int? heading;
  String? navigationSolution;

  EndRideDataTripDataEventStatusPosition({
    this.timestamp,
    this.lon,
    this.lat,
    this.hdop,
    this.speedOverGround,
    this.quality,
    this.satellitesInUse,
    this.altitude,
    this.heading,
    this.navigationSolution,
  });
  EndRideDataTripDataEventStatusPosition.fromJson(Map<String, dynamic> json) {
    timestamp = json['timestamp']?.toString();
    lon = json['lon']?.toDouble();
    lat = json['lat']?.toDouble();
    hdop = json['hdop']?.toDouble();
    speedOverGround = json['speed_over_ground']?.toInt();
    quality = json['quality']?.toInt();
    satellitesInUse = json['satellites_in_use']?.toInt();
    altitude = json['altitude']?.toInt();
    heading = json['heading']?.toInt();
    navigationSolution = json['navigation_solution']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['timestamp'] = timestamp;
    data['lon'] = lon;
    data['lat'] = lat;
    data['hdop'] = hdop;
    data['speed_over_ground'] = speedOverGround;
    data['quality'] = quality;
    data['satellites_in_use'] = satellitesInUse;
    data['altitude'] = altitude;
    data['heading'] = heading;
    data['navigation_solution'] = navigationSolution;
    return data;
  }
}

class EndRideDataTripDataEventStatusAlarmInputs {
/*
{
  "1": "OFF",
  "2": "OFF"
}
*/

  String? the1;
  String? the2;

  EndRideDataTripDataEventStatusAlarmInputs({
    this.the1,
    this.the2,
  });
  EndRideDataTripDataEventStatusAlarmInputs.fromJson(Map<String, dynamic> json) {
    the1 = json['1']?.toString();
    the2 = json['2']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['1'] = the1;
    data['2'] = the2;
    return data;
  }
}

class EndRideDataTripDataEventStatus {
/*
{
  "fuel_level": 13,
  "mileage": 28462,
  "mileage_since_immobilizer_unlock": 5,
  "immobilizer": "unlocked",
  "ignition": "off",
  "central_lock": "locked",
  "keyfob": "in",
  "speed": 0,
  "bluetooth_connection": "disconnected",
  "board_voltage": 12.64,
  "seconds_since_immobilizer_unlock": 0,
  "central_lock_last_command": "locked",
  "alarm_input": "off",
  "alarm_input_2": "off",
  "alarm_inputs": {
    "1": "OFF",
    "2": "OFF"
  },
  "low_fuel_level_alarm": true,
  "low_battery_level_alarm": false,
  "relay_value": 0,
  "tilt_status": "unknown",
  "position": {
    "timestamp": "2023-10-19T07:08:49.000Z",
    "lon": -121.340591,
    "lat": 38.610764,
    "hdop": 0.96,
    "speed_over_ground": 0,
    "quality": 1,
    "satellites_in_use": 12,
    "altitude": 21,
    "heading": 307,
    "navigation_solution": "standalone_3d"
  },
  "bluetooth_authenticated": false
}
*/

  int? fuelLevel;
  int? mileage;
  int? mileageSinceImmobilizerUnlock;
  String? immobilizer;
  String? ignition;
  String? centralLock;
  String? keyfob;
  int? speed;
  String? bluetoothConnection;
  double? boardVoltage;
  int? secondsSinceImmobilizerUnlock;
  String? centralLockLastCommand;
  String? alarmInput;
  String? alarmInput_2;
  EndRideDataTripDataEventStatusAlarmInputs? alarmInputs;
  bool? lowFuelLevelAlarm;
  bool? lowBatteryLevelAlarm;
  int? relayValue;
  String? tiltStatus;
  EndRideDataTripDataEventStatusPosition? position;
  bool? bluetoothAuthenticated;

  EndRideDataTripDataEventStatus({
    this.fuelLevel,
    this.mileage,
    this.mileageSinceImmobilizerUnlock,
    this.immobilizer,
    this.ignition,
    this.centralLock,
    this.keyfob,
    this.speed,
    this.bluetoothConnection,
    this.boardVoltage,
    this.secondsSinceImmobilizerUnlock,
    this.centralLockLastCommand,
    this.alarmInput,
    this.alarmInput_2,
    this.alarmInputs,
    this.lowFuelLevelAlarm,
    this.lowBatteryLevelAlarm,
    this.relayValue,
    this.tiltStatus,
    this.position,
    this.bluetoothAuthenticated,
  });
  EndRideDataTripDataEventStatus.fromJson(Map<String, dynamic> json) {
    fuelLevel = json['fuel_level']?.toInt();
    mileage = json['mileage']?.toInt();
    mileageSinceImmobilizerUnlock = json['mileage_since_immobilizer_unlock']?.toInt();
    immobilizer = json['immobilizer']?.toString();
    ignition = json['ignition']?.toString();
    centralLock = json['central_lock']?.toString();
    keyfob = json['keyfob']?.toString();
    speed = json['speed']?.toInt();
    bluetoothConnection = json['bluetooth_connection']?.toString();
    boardVoltage = json['board_voltage']?.toDouble();
    secondsSinceImmobilizerUnlock = json['seconds_since_immobilizer_unlock']?.toInt();
    centralLockLastCommand = json['central_lock_last_command']?.toString();
    alarmInput = json['alarm_input']?.toString();
    alarmInput_2 = json['alarm_input_2']?.toString();
    alarmInputs = (json['alarm_inputs'] != null) ? EndRideDataTripDataEventStatusAlarmInputs.fromJson(json['alarm_inputs']) : null;
    lowFuelLevelAlarm = json['low_fuel_level_alarm'];
    lowBatteryLevelAlarm = json['low_battery_level_alarm'];
    relayValue = json['relay_value']?.toInt();
    tiltStatus = json['tilt_status']?.toString();
    position = (json['position'] != null) ? EndRideDataTripDataEventStatusPosition.fromJson(json['position']) : null;
    bluetoothAuthenticated = json['bluetooth_authenticated'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['fuel_level'] = fuelLevel;
    data['mileage'] = mileage;
    data['mileage_since_immobilizer_unlock'] = mileageSinceImmobilizerUnlock;
    data['immobilizer'] = immobilizer;
    data['ignition'] = ignition;
    data['central_lock'] = centralLock;
    data['keyfob'] = keyfob;
    data['speed'] = speed;
    data['bluetooth_connection'] = bluetoothConnection;
    data['board_voltage'] = boardVoltage;
    data['seconds_since_immobilizer_unlock'] = secondsSinceImmobilizerUnlock;
    data['central_lock_last_command'] = centralLockLastCommand;
    data['alarm_input'] = alarmInput;
    data['alarm_input_2'] = alarmInput_2;
    if (alarmInputs != null) {
      data['alarm_inputs'] = alarmInputs!.toJson();
    }
    data['low_fuel_level_alarm'] = lowFuelLevelAlarm;
    data['low_battery_level_alarm'] = lowBatteryLevelAlarm;
    data['relay_value'] = relayValue;
    data['tilt_status'] = tiltStatus;
    if (position != null) {
      data['position'] = position!.toJson();
    }
    data['bluetooth_authenticated'] = bluetoothAuthenticated;
    return data;
  }
}

class EndRideDataTripDataEvent {
/*
{
  "timestamp": "2023-10-19T07:09:24.000Z",
  "reasons": [
    "immobilizer_changed"
  ],
  "source": "server",
  "request_id": "39265dcd-ef37-467c-8569-fbac47da05de",
  "flow_id": "39265dcd-ef37-467c-8569-fbac47da05de",
  "status": {
    "fuel_level": 13,
    "mileage": 28462,
    "mileage_since_immobilizer_unlock": 5,
    "immobilizer": "unlocked",
    "ignition": "off",
    "central_lock": "locked",
    "keyfob": "in",
    "speed": 0,
    "bluetooth_connection": "disconnected",
    "board_voltage": 12.64,
    "seconds_since_immobilizer_unlock": 0,
    "central_lock_last_command": "locked",
    "alarm_input": "off",
    "alarm_input_2": "off",
    "alarm_inputs": {
      "1": "OFF",
      "2": "OFF"
    },
    "low_fuel_level_alarm": true,
    "low_battery_level_alarm": false,
    "relay_value": 0,
    "tilt_status": "unknown",
    "position": {
      "timestamp": "2023-10-19T07:08:49.000Z",
      "lon": -121.340591,
      "lat": 38.610764,
      "hdop": 0.96,
      "speed_over_ground": 0,
      "quality": 1,
      "satellites_in_use": 12,
      "altitude": 21,
      "heading": 307,
      "navigation_solution": "standalone_3d"
    },
    "bluetooth_authenticated": false
  }
}
*/

  String? timestamp;
  List<String?>? reasons;
  String? source;
  String? requestId;
  String? flowId;
  EndRideDataTripDataEventStatus? status;

  EndRideDataTripDataEvent({
    this.timestamp,
    this.reasons,
    this.source,
    this.requestId,
    this.flowId,
    this.status,
  });
  EndRideDataTripDataEvent.fromJson(Map<String, dynamic> json) {
    timestamp = json['timestamp']?.toString();
    if (json['reasons'] != null) {
      final v = json['reasons'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      reasons = arr0;
    }
    source = json['source']?.toString();
    requestId = json['request_id']?.toString();
    flowId = json['flow_id']?.toString();
    status = (json['status'] != null) ? EndRideDataTripDataEventStatus.fromJson(json['status']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['timestamp'] = timestamp;
    if (reasons != null) {
      final v = reasons;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['reasons'] = arr0;
    }
    data['source'] = source;
    data['request_id'] = requestId;
    data['flow_id'] = flowId;
    if (status != null) {
      data['status'] = status!.toJson();
    }
    return data;
  }
}

class EndRideDataTripData {
/*
{
  "qnr": "6DB9853D00FFF005",
  "reception_timestamp": "2023-10-19T07:09:26.194Z",
  "event": {
    "timestamp": "2023-10-19T07:09:24.000Z",
    "reasons": [
      "immobilizer_changed"
    ],
    "source": "server",
    "request_id": "39265dcd-ef37-467c-8569-fbac47da05de",
    "flow_id": "39265dcd-ef37-467c-8569-fbac47da05de",
    "status": {
      "fuel_level": 13,
      "mileage": 28462,
      "mileage_since_immobilizer_unlock": 5,
      "immobilizer": "unlocked",
      "ignition": "off",
      "central_lock": "locked",
      "keyfob": "in",
      "speed": 0,
      "bluetooth_connection": "disconnected",
      "board_voltage": 12.64,
      "seconds_since_immobilizer_unlock": 0,
      "central_lock_last_command": "locked",
      "alarm_input": "off",
      "alarm_input_2": "off",
      "alarm_inputs": {
        "1": "OFF",
        "2": "OFF"
      },
      "low_fuel_level_alarm": true,
      "low_battery_level_alarm": false,
      "relay_value": 0,
      "tilt_status": "unknown",
      "position": {
        "timestamp": "2023-10-19T07:08:49.000Z",
        "lon": -121.340591,
        "lat": 38.610764,
        "hdop": 0.96,
        "speed_over_ground": 0,
        "quality": 1,
        "satellites_in_use": 12,
        "altitude": 21,
        "heading": 307,
        "navigation_solution": "standalone_3d"
      },
      "bluetooth_authenticated": false
    }
  }
}
*/

  String? qnr;
  String? receptionTimestamp;
  EndRideDataTripDataEvent? event;

  EndRideDataTripData({
    this.qnr,
    this.receptionTimestamp,
    this.event,
  });
  EndRideDataTripData.fromJson(Map<String, dynamic> json) {
    qnr = json['qnr']?.toString();
    receptionTimestamp = json['reception_timestamp']?.toString();
    event = (json['event'] != null) ? EndRideDataTripDataEvent.fromJson(json['event']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['qnr'] = qnr;
    data['reception_timestamp'] = receptionTimestamp;
    if (event != null) {
      data['event'] = event!.toJson();
    }
    return data;
  }
}

class EndRideDataDropLocation {
/*
{
  "address": "",
  "type": "Point",
  "coordinates": [
    -121.34066
  ]
}
*/

  String? address;
  String? type;
  List<double?>? coordinates;

  EndRideDataDropLocation({
    this.address,
    this.type,
    this.coordinates,
  });
  EndRideDataDropLocation.fromJson(Map<String, dynamic> json) {
    address = json['address']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['address'] = address;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class EndRideDataPickupLocation {
/*
{
  "address": "",
  "type": "Point",
  "coordinates": [
    -121.340591
  ]
}
*/

  String? address;
  String? type;
  List<double?>? coordinates;

  EndRideDataPickupLocation({
    this.address,
    this.type,
    this.coordinates,
  });
  EndRideDataPickupLocation.fromJson(Map<String, dynamic> json) {
    address = json['address']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['address'] = address;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class EndRideData {
/*
{
  "pickupLocation": {
    "address": "",
    "type": "Point",
    "coordinates": [
      -121.340591
    ]
  },
  "dropLocation": {
    "address": "",
    "type": "Point",
    "coordinates": [
      -121.34066
    ]
  },
  "_id": "6530d5ed4beb27c50e37ce9e",
  "user": "6388c33fc6b2d524a07fdc15",
  "car": "63f377e5d6cc2f883de290ce",
  "qnr": "6DB9853D00FFF005",
  "status": "completed",
  "pickupTime": "2023-10-19T07:09:24.000Z",
  "dropTime": "2023-10-19T07:13:00.000Z",
  "cancelReason": "",
  "cancelledBy": "",
  "isPaymentSuccess": false,
  "paymentMethod": "",
  "rideEndedBy": "user",
  "waitingTime": 49,
  "additionalWaitingTime": 0,
  "path": [
    [
      "38.610764"
    ]
  ],
  "ridePauseTime": 0,
  "tripData": [
    {
      "qnr": "6DB9853D00FFF005",
      "reception_timestamp": "2023-10-19T07:09:26.194Z",
      "event": {
        "timestamp": "2023-10-19T07:09:24.000Z",
        "reasons": [
          "immobilizer_changed"
        ],
        "source": "server",
        "request_id": "39265dcd-ef37-467c-8569-fbac47da05de",
        "flow_id": "39265dcd-ef37-467c-8569-fbac47da05de",
        "status": {
          "fuel_level": 13,
          "mileage": 28462,
          "mileage_since_immobilizer_unlock": 5,
          "immobilizer": "unlocked",
          "ignition": "off",
          "central_lock": "locked",
          "keyfob": "in",
          "speed": 0,
          "bluetooth_connection": "disconnected",
          "board_voltage": 12.64,
          "seconds_since_immobilizer_unlock": 0,
          "central_lock_last_command": "locked",
          "alarm_input": "off",
          "alarm_input_2": "off",
          "alarm_inputs": {
            "1": "OFF",
            "2": "OFF"
          },
          "low_fuel_level_alarm": true,
          "low_battery_level_alarm": false,
          "relay_value": 0,
          "tilt_status": "unknown",
          "position": {
            "timestamp": "2023-10-19T07:08:49.000Z",
            "lon": -121.340591,
            "lat": 38.610764,
            "hdop": 0.96,
            "speed_over_ground": 0,
            "quality": 1,
            "satellites_in_use": 12,
            "altitude": 21,
            "heading": 307,
            "navigation_solution": "standalone_3d"
          },
          "bluetooth_authenticated": false
        }
      }
    }
  ],
  "isDeleted": false,
  "ignitionEvents": [
    ""
  ],
  "createdAt": "2023-10-19T07:08:29.621Z",
  "updatedAt": "2023-10-19T07:13:54.175Z",
  "paymentStep": "initialPayment",
  "id": "6530d5ed4beb27c50e37ce9e"
}
*/

  EndRideDataPickupLocation? pickupLocation;
  EndRideDataDropLocation? dropLocation;
  String? Id;
  String? user;
  String? car;
  String? qnr;
  String? status;
  String? pickupTime;
  String? dropTime;
  String? cancelReason;
  String? cancelledBy;
  bool? isPaymentSuccess;
  String? paymentMethod;
  String? rideEndedBy;
  int? waitingTime;
  int? additionalWaitingTime;
  List<List<String?>?>? path;
  int? ridePauseTime;
  List<EndRideDataTripData?>? tripData;
  bool? isDeleted;
  List<String?>? ignitionEvents;
  String? createdAt;
  String? updatedAt;
  String? paymentStep;
  String? id;

  EndRideData({
    this.pickupLocation,
    this.dropLocation,
    this.Id,
    this.user,
    this.car,
    this.qnr,
    this.status,
    this.pickupTime,
    this.dropTime,
    this.cancelReason,
    this.cancelledBy,
    this.isPaymentSuccess,
    this.paymentMethod,
    this.rideEndedBy,
    this.waitingTime,
    this.additionalWaitingTime,
    this.path,
    this.ridePauseTime,
    this.tripData,
    this.isDeleted,
    this.ignitionEvents,
    this.createdAt,
    this.updatedAt,
    this.paymentStep,
    this.id,
  });
  EndRideData.fromJson(Map<String, dynamic> json) {
    pickupLocation = (json['pickupLocation'] != null) ? EndRideDataPickupLocation.fromJson(json['pickupLocation']) : null;
    dropLocation = (json['dropLocation'] != null) ? EndRideDataDropLocation.fromJson(json['dropLocation']) : null;
    Id = json['_id']?.toString();
    user = json['user']?.toString();
    car = json['car']?.toString();
    qnr = json['qnr']?.toString();
    status = json['status']?.toString();
    pickupTime = json['pickupTime']?.toString();
    dropTime = json['dropTime']?.toString();
    cancelReason = json['cancelReason']?.toString();
    cancelledBy = json['cancelledBy']?.toString();
    isPaymentSuccess = json['isPaymentSuccess'];
    paymentMethod = json['paymentMethod']?.toString();
    rideEndedBy = json['rideEndedBy']?.toString();
    waitingTime = json['waitingTime']?.toInt();
    additionalWaitingTime = json['additionalWaitingTime']?.toInt();
    if (json['path'] != null) {
      final v = json['path'];
      final arr0 = <List<String>>[];
      v.forEach((v) {
        final arr1 = <String>[];
        v.forEach((v) {
          arr1.add(v.toString());
        });
        arr0.add(arr1);
      });
      path = arr0;
    }
    ridePauseTime = json['ridePauseTime']?.toInt();
    if (json['tripData'] != null) {
      final v = json['tripData'];
      final arr0 = <EndRideDataTripData>[];
      v.forEach((v) {
        arr0.add(EndRideDataTripData.fromJson(v));
      });
      tripData = arr0;
    }
    isDeleted = json['isDeleted'];
    if (json['ignitionEvents'] != null) {
      final v = json['ignitionEvents'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      ignitionEvents = arr0;
    }
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    paymentStep = json['paymentStep']?.toString();
    id = json['id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (pickupLocation != null) {
      data['pickupLocation'] = pickupLocation!.toJson();
    }
    if (dropLocation != null) {
      data['dropLocation'] = dropLocation!.toJson();
    }
    data['_id'] = Id;
    data['user'] = user;
    data['car'] = car;
    data['qnr'] = qnr;
    data['status'] = status;
    data['pickupTime'] = pickupTime;
    data['dropTime'] = dropTime;
    data['cancelReason'] = cancelReason;
    data['cancelledBy'] = cancelledBy;
    data['isPaymentSuccess'] = isPaymentSuccess;
    data['paymentMethod'] = paymentMethod;
    data['rideEndedBy'] = rideEndedBy;
    data['waitingTime'] = waitingTime;
    data['additionalWaitingTime'] = additionalWaitingTime;
    if (path != null) {
      final v = path;
      final arr0 = [];
      v!.forEach((v) {
        final arr1 = [];
        v!.forEach((v) {
          arr1.add(v);
        });
        arr0.add(arr1);
      });
      data['path'] = arr0;
    }
    data['ridePauseTime'] = ridePauseTime;
    if (tripData != null) {
      final v = tripData;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['tripData'] = arr0;
    }
    data['isDeleted'] = isDeleted;
    if (ignitionEvents != null) {
      final v = ignitionEvents;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['ignitionEvents'] = arr0;
    }
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['paymentStep'] = paymentStep;
    data['id'] = id;
    return data;
  }
}

class EndRide {
/*
{
  "status": true,
  "message": "Ride ended.",
  "data": {
    "pickupLocation": {
      "address": "",
      "type": "Point",
      "coordinates": [
        -121.340591
      ]
    },
    "dropLocation": {
      "address": "",
      "type": "Point",
      "coordinates": [
        -121.34066
      ]
    },
    "_id": "6530d5ed4beb27c50e37ce9e",
    "user": "6388c33fc6b2d524a07fdc15",
    "car": "63f377e5d6cc2f883de290ce",
    "qnr": "6DB9853D00FFF005",
    "status": "completed",
    "pickupTime": "2023-10-19T07:09:24.000Z",
    "dropTime": "2023-10-19T07:13:00.000Z",
    "cancelReason": "",
    "cancelledBy": "",
    "isPaymentSuccess": false,
    "paymentMethod": "",
    "rideEndedBy": "user",
    "waitingTime": 49,
    "additionalWaitingTime": 0,
    "path": [
      [
        "38.610764"
      ]
    ],
    "ridePauseTime": 0,
    "tripData": [
      {
        "qnr": "6DB9853D00FFF005",
        "reception_timestamp": "2023-10-19T07:09:26.194Z",
        "event": {
          "timestamp": "2023-10-19T07:09:24.000Z",
          "reasons": [
            "immobilizer_changed"
          ],
          "source": "server",
          "request_id": "39265dcd-ef37-467c-8569-fbac47da05de",
          "flow_id": "39265dcd-ef37-467c-8569-fbac47da05de",
          "status": {
            "fuel_level": 13,
            "mileage": 28462,
            "mileage_since_immobilizer_unlock": 5,
            "immobilizer": "unlocked",
            "ignition": "off",
            "central_lock": "locked",
            "keyfob": "in",
            "speed": 0,
            "bluetooth_connection": "disconnected",
            "board_voltage": 12.64,
            "seconds_since_immobilizer_unlock": 0,
            "central_lock_last_command": "locked",
            "alarm_input": "off",
            "alarm_input_2": "off",
            "alarm_inputs": {
              "1": "OFF",
              "2": "OFF"
            },
            "low_fuel_level_alarm": true,
            "low_battery_level_alarm": false,
            "relay_value": 0,
            "tilt_status": "unknown",
            "position": {
              "timestamp": "2023-10-19T07:08:49.000Z",
              "lon": -121.340591,
              "lat": 38.610764,
              "hdop": 0.96,
              "speed_over_ground": 0,
              "quality": 1,
              "satellites_in_use": 12,
              "altitude": 21,
              "heading": 307,
              "navigation_solution": "standalone_3d"
            },
            "bluetooth_authenticated": false
          }
        }
      }
    ],
    "isDeleted": false,
    "ignitionEvents": [
      ""
    ],
    "createdAt": "2023-10-19T07:08:29.621Z",
    "updatedAt": "2023-10-19T07:13:54.175Z",
    "paymentStep": "initialPayment",
    "id": "6530d5ed4beb27c50e37ce9e"
  }
}
*/

  bool? status;
  String? message;
  EndRideData? data;

  EndRide({
    this.status,
    this.message,
    this.data,
  });
  EndRide.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    message = json['message']?.toString();
    data = (json['data'] != null) ? EndRideData.fromJson(json['data']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}
