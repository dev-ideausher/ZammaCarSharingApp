///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptionsCard {
/*
{
  "installments": "null",
  "mandate_options": "null",
  "network": "null",
  "request_three_d_secure": "automatic"
}
*/

  String? installments;
  String? mandateOptions;
  String? network;
  String? requestThreeDSecure;

  TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptionsCard({
    this.installments,
    this.mandateOptions,
    this.network,
    this.requestThreeDSecure,
  });
  TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptionsCard.fromJson(Map<String, dynamic> json) {
    installments = json['installments']?.toString();
    mandateOptions = json['mandate_options']?.toString();
    network = json['network']?.toString();
    requestThreeDSecure = json['request_three_d_secure']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['installments'] = installments;
    data['mandate_options'] = mandateOptions;
    data['network'] = network;
    data['request_three_d_secure'] = requestThreeDSecure;
    return data;
  }
}

class TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptions {
/*
{
  "card": {
    "installments": "null",
    "mandate_options": "null",
    "network": "null",
    "request_three_d_secure": "automatic"
  }
}
*/

  TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptionsCard? card;

  TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptions({
    this.card,
  });
  TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptions.fromJson(Map<String, dynamic> json) {
    card = (json['card'] != null) ? TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptionsCard.fromJson(json['card']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (card != null) {
      data['card'] = card!.toJson();
    }
    return data;
  }
}

class TransactionDetailsBookingTransactionsStripePaymentDetail {
/*
{
  "id": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc",
  "object": "payment_intent",
  "amount": 3175,
  "amount_capturable": 0,
  "amount_received": 3175,
  "application": "null",
  "application_fee_amount": "null",
  "automatic_payment_methods": "null",
  "canceled_at": "null",
  "cancellation_reason": "null",
  "capture_method": "automatic",
  "client_secret": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc_secret_fbXm7uGw9MvExuHmu2XY3e8jz",
  "confirmation_method": "automatic",
  "created": 1684215931,
  "currency": "usd",
  "customer": "cus_NrUqU0rlJ0QffW",
  "description": "null",
  "invoice": "null",
  "last_payment_error": "null",
  "latest_charge": "ch_3N8GhTERG4ZXrlcJ1ECCYl7e",
  "livemode": false,
  "next_action": "null",
  "on_behalf_of": "null",
  "payment_method": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
  "payment_method_options": {
    "card": {
      "installments": "null",
      "mandate_options": "null",
      "network": "null",
      "request_three_d_secure": "automatic"
    }
  },
  "payment_method_types": [
    "card"
  ],
  "processing": "null",
  "receipt_email": "null",
  "review": "null",
  "setup_future_usage": "null",
  "shipping": "null",
  "source": "null",
  "statement_descriptor": "null",
  "statement_descriptor_suffix": "null",
  "status": "succeeded",
  "transfer_data": "null",
  "transfer_group": "null"
}
*/

  String? id;
  String? object;
  int? amount;
  int? amountCapturable;
  int? amountReceived;
  String? application;
  String? applicationFeeAmount;
  String? automaticPaymentMethods;
  String? canceledAt;
  String? cancellationReason;
  String? captureMethod;
  String? clientSecret;
  String? confirmationMethod;
  int? created;
  String? currency;
  String? customer;
  String? description;
  String? invoice;
  String? lastPaymentError;
  String? latestCharge;
  bool? livemode;
  String? nextAction;
  String? onBehalfOf;
  String? paymentMethod;
  TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptions? paymentMethodOptions;
  List<String?>? paymentMethodTypes;
  String? processing;
  String? receiptEmail;
  String? review;
  String? setupFutureUsage;
  String? shipping;
  String? source;
  String? statementDescriptor;
  String? statementDescriptorSuffix;
  String? status;
  String? transferData;
  String? transferGroup;

  TransactionDetailsBookingTransactionsStripePaymentDetail({
    this.id,
    this.object,
    this.amount,
    this.amountCapturable,
    this.amountReceived,
    this.application,
    this.applicationFeeAmount,
    this.automaticPaymentMethods,
    this.canceledAt,
    this.cancellationReason,
    this.captureMethod,
    this.clientSecret,
    this.confirmationMethod,
    this.created,
    this.currency,
    this.customer,
    this.description,
    this.invoice,
    this.lastPaymentError,
    this.latestCharge,
    this.livemode,
    this.nextAction,
    this.onBehalfOf,
    this.paymentMethod,
    this.paymentMethodOptions,
    this.paymentMethodTypes,
    this.processing,
    this.receiptEmail,
    this.review,
    this.setupFutureUsage,
    this.shipping,
    this.source,
    this.statementDescriptor,
    this.statementDescriptorSuffix,
    this.status,
    this.transferData,
    this.transferGroup,
  });
  TransactionDetailsBookingTransactionsStripePaymentDetail.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    object = json['object']?.toString();
    amount = json['amount']?.toInt();
    amountCapturable = json['amount_capturable']?.toInt();
    amountReceived = json['amount_received']?.toInt();
    application = json['application']?.toString();
    applicationFeeAmount = json['application_fee_amount']?.toString();
    automaticPaymentMethods = json['automatic_payment_methods']?.toString();
    canceledAt = json['canceled_at']?.toString();
    cancellationReason = json['cancellation_reason']?.toString();
    captureMethod = json['capture_method']?.toString();
    clientSecret = json['client_secret']?.toString();
    confirmationMethod = json['confirmation_method']?.toString();
    created = json['created']?.toInt();
    currency = json['currency']?.toString();
    customer = json['customer']?.toString();
    description = json['description']?.toString();
    invoice = json['invoice']?.toString();
    lastPaymentError = json['last_payment_error']?.toString();
    latestCharge = json['latest_charge']?.toString();
    livemode = json['livemode'];
    nextAction = json['next_action']?.toString();
    onBehalfOf = json['on_behalf_of']?.toString();
    paymentMethod = json['payment_method']?.toString();
    paymentMethodOptions = (json['payment_method_options'] != null) ? TransactionDetailsBookingTransactionsStripePaymentDetailPaymentMethodOptions.fromJson(json['payment_method_options']) : null;
    if (json['payment_method_types'] != null) {
      final v = json['payment_method_types'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      paymentMethodTypes = arr0;
    }
    processing = json['processing']?.toString();
    receiptEmail = json['receipt_email']?.toString();
    review = json['review']?.toString();
    setupFutureUsage = json['setup_future_usage']?.toString();
    shipping = json['shipping']?.toString();
    source = json['source']?.toString();
    statementDescriptor = json['statement_descriptor']?.toString();
    statementDescriptorSuffix = json['statement_descriptor_suffix']?.toString();
    status = json['status']?.toString();
    transferData = json['transfer_data']?.toString();
    transferGroup = json['transfer_group']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['object'] = object;
    data['amount'] = amount;
    data['amount_capturable'] = amountCapturable;
    data['amount_received'] = amountReceived;
    data['application'] = application;
    data['application_fee_amount'] = applicationFeeAmount;
    data['automatic_payment_methods'] = automaticPaymentMethods;
    data['canceled_at'] = canceledAt;
    data['cancellation_reason'] = cancellationReason;
    data['capture_method'] = captureMethod;
    data['client_secret'] = clientSecret;
    data['confirmation_method'] = confirmationMethod;
    data['created'] = created;
    data['currency'] = currency;
    data['customer'] = customer;
    data['description'] = description;
    data['invoice'] = invoice;
    data['last_payment_error'] = lastPaymentError;
    data['latest_charge'] = latestCharge;
    data['livemode'] = livemode;
    data['next_action'] = nextAction;
    data['on_behalf_of'] = onBehalfOf;
    data['payment_method'] = paymentMethod;
    if (paymentMethodOptions != null) {
      data['payment_method_options'] = paymentMethodOptions!.toJson();
    }
    if (paymentMethodTypes != null) {
      final v = paymentMethodTypes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['payment_method_types'] = arr0;
    }
    data['processing'] = processing;
    data['receipt_email'] = receiptEmail;
    data['review'] = review;
    data['setup_future_usage'] = setupFutureUsage;
    data['shipping'] = shipping;
    data['source'] = source;
    data['statement_descriptor'] = statementDescriptor;
    data['statement_descriptor_suffix'] = statementDescriptorSuffix;
    data['status'] = status;
    data['transfer_data'] = transferData;
    data['transfer_group'] = transferGroup;
    return data;
  }
}

class TransactionDetailsBookingTransactionsBookingPaymentObject {
/*
{
  "mile": 20,
  "time": 3,
  "tax": 0
}
*/

  int? mile;
  int? time;
  int? tax;

  TransactionDetailsBookingTransactionsBookingPaymentObject({
    this.mile,
    this.time,
    this.tax,
  });
  TransactionDetailsBookingTransactionsBookingPaymentObject.fromJson(Map<String, dynamic> json) {
    mile = json['mile']?.toInt();
    time = json['time']?.toInt();
    tax = json['tax']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['mile'] = mile;
    data['time'] = time;
    data['tax'] = tax;
    return data;
  }
}

class TransactionDetailsBookingTransactions {
/*
{
  "_id": "6463187d480ea0cad5d749dd",
  "booking": "64631869480ea0cad5d749d3",
  "bookingPlan": "custom",
  "user": "6388c33fc6b2d524a07fdc15",
  "paymentStep": "initialPayment",
  "bookingPaymentObject": {
    "mile": 20,
    "time": 3,
    "tax": 0
  },
  "amount": 31.75,
  "transactionId": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc",
  "stripePaymentDetail": {
    "id": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc",
    "object": "payment_intent",
    "amount": 3175,
    "amount_capturable": 0,
    "amount_received": 3175,
    "application": "null",
    "application_fee_amount": "null",
    "automatic_payment_methods": "null",
    "canceled_at": "null",
    "cancellation_reason": "null",
    "capture_method": "automatic",
    "client_secret": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc_secret_fbXm7uGw9MvExuHmu2XY3e8jz",
    "confirmation_method": "automatic",
    "created": 1684215931,
    "currency": "usd",
    "customer": "cus_NrUqU0rlJ0QffW",
    "description": "null",
    "invoice": "null",
    "last_payment_error": "null",
    "latest_charge": "ch_3N8GhTERG4ZXrlcJ1ECCYl7e",
    "livemode": false,
    "next_action": "null",
    "on_behalf_of": "null",
    "payment_method": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
    "payment_method_options": {
      "card": {
        "installments": "null",
        "mandate_options": "null",
        "network": "null",
        "request_three_d_secure": "automatic"
      }
    },
    "payment_method_types": [
      "card"
    ],
    "processing": "null",
    "receipt_email": "null",
    "review": "null",
    "setup_future_usage": "null",
    "shipping": "null",
    "source": "null",
    "statement_descriptor": "null",
    "statement_descriptor_suffix": "null",
    "status": "succeeded",
    "transfer_data": "null",
    "transfer_group": "null"
  },
  "totalPaidForBooking": 31.75,
  "createdAt": "2023-05-16T05:45:33.040Z",
  "updatedAt": "2023-05-16T05:45:33.040Z",
  "id": "6463187d480ea0cad5d749dd"
}
*/

  String? Id;
  String? booking;
  String? bookingPlan;
  String? user;
  String? paymentStep;
  TransactionDetailsBookingTransactionsBookingPaymentObject? bookingPaymentObject;
  double? amount;
  String? transactionId;
  TransactionDetailsBookingTransactionsStripePaymentDetail? stripePaymentDetail;
  double? totalPaidForBooking;
  String? createdAt;
  String? updatedAt;
  String? id;

  TransactionDetailsBookingTransactions({
    this.Id,
    this.booking,
    this.bookingPlan,
    this.user,
    this.paymentStep,
    this.bookingPaymentObject,
    this.amount,
    this.transactionId,
    this.stripePaymentDetail,
    this.totalPaidForBooking,
    this.createdAt,
    this.updatedAt,
    this.id,
  });
  TransactionDetailsBookingTransactions.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    booking = json['booking']?.toString();
    bookingPlan = json['bookingPlan']?.toString();
    user = json['user']?.toString();
    paymentStep = json['paymentStep']?.toString();
    bookingPaymentObject = (json['bookingPaymentObject'] != null) ? TransactionDetailsBookingTransactionsBookingPaymentObject.fromJson(json['bookingPaymentObject']) : null;
    amount = json['amount']?.toDouble();
    transactionId = json['transactionId']?.toString();
    stripePaymentDetail = (json['stripePaymentDetail'] != null) ? TransactionDetailsBookingTransactionsStripePaymentDetail.fromJson(json['stripePaymentDetail']) : null;
    totalPaidForBooking = json['totalPaidForBooking']?.toDouble();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    id = json['id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['booking'] = booking;
    data['bookingPlan'] = bookingPlan;
    data['user'] = user;
    data['paymentStep'] = paymentStep;
    if (bookingPaymentObject != null) {
      data['bookingPaymentObject'] = bookingPaymentObject!.toJson();
    }
    data['amount'] = amount;
    data['transactionId'] = transactionId;
    if (stripePaymentDetail != null) {
      data['stripePaymentDetail'] = stripePaymentDetail!.toJson();
    }
    data['totalPaidForBooking'] = totalPaidForBooking;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['id'] = id;
    return data;
  }
}

class TransactionDetails {
/*
{
  "status": true,
  "message": "Booking transactions",
  "bookingTransactions": [
    {
      "_id": "6463187d480ea0cad5d749dd",
      "booking": "64631869480ea0cad5d749d3",
      "bookingPlan": "custom",
      "user": "6388c33fc6b2d524a07fdc15",
      "paymentStep": "initialPayment",
      "bookingPaymentObject": {
        "mile": 20,
        "time": 3,
        "tax": 0
      },
      "amount": 31.75,
      "transactionId": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc",
      "stripePaymentDetail": {
        "id": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc",
        "object": "payment_intent",
        "amount": 3175,
        "amount_capturable": 0,
        "amount_received": 3175,
        "application": "null",
        "application_fee_amount": "null",
        "automatic_payment_methods": "null",
        "canceled_at": "null",
        "cancellation_reason": "null",
        "capture_method": "automatic",
        "client_secret": "pi_3N8GhTERG4ZXrlcJ1SOFQfcc_secret_fbXm7uGw9MvExuHmu2XY3e8jz",
        "confirmation_method": "automatic",
        "created": 1684215931,
        "currency": "usd",
        "customer": "cus_NrUqU0rlJ0QffW",
        "description": "null",
        "invoice": "null",
        "last_payment_error": "null",
        "latest_charge": "ch_3N8GhTERG4ZXrlcJ1ECCYl7e",
        "livemode": false,
        "next_action": "null",
        "on_behalf_of": "null",
        "payment_method": "card_1N5lqvERG4ZXrlcJ1xsAzT9V",
        "payment_method_options": {
          "card": {
            "installments": "null",
            "mandate_options": "null",
            "network": "null",
            "request_three_d_secure": "automatic"
          }
        },
        "payment_method_types": [
          "card"
        ],
        "processing": "null",
        "receipt_email": "null",
        "review": "null",
        "setup_future_usage": "null",
        "shipping": "null",
        "source": "null",
        "statement_descriptor": "null",
        "statement_descriptor_suffix": "null",
        "status": "succeeded",
        "transfer_data": "null",
        "transfer_group": "null"
      },
      "totalPaidForBooking": 31.75,
      "createdAt": "2023-05-16T05:45:33.040Z",
      "updatedAt": "2023-05-16T05:45:33.040Z",
      "id": "6463187d480ea0cad5d749dd"
    }
  ]
}
*/

  bool? status;
  String? message;
  List<TransactionDetailsBookingTransactions?>? bookingTransactions;

  TransactionDetails({
    this.status,
    this.message,
    this.bookingTransactions,
  });
  TransactionDetails.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    message = json['message']?.toString();
    if (json['bookingTransactions'] != null) {
      final v = json['bookingTransactions'];
      final arr0 = <TransactionDetailsBookingTransactions>[];
      v.forEach((v) {
        arr0.add(TransactionDetailsBookingTransactions.fromJson(v));
      });
      bookingTransactions = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    if (bookingTransactions != null) {
      final v = bookingTransactions;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['bookingTransactions'] = arr0;
    }
    return data;
  }
}
